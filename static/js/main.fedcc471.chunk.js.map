{"version":3,"sources":["App.js","index.js"],"names":["App","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","props","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","field","isGameActive","isWin","handleKeyUp","bind","assertThisInitialized","document","addEventListener","removeEventListener","spawnNumbers","setState","count","_this2","freeCells","finalCells","row","col","push","i","cellToSpawn","Math","floor","random","splice","prevState","newField","toConsumableArray","_i","_finalCells","cell","_cell","slicedToArray","getNewTileValue","event","key","includes","handleMove","moveKey","_this3","console","log","fieldAfterMove","shiftedRow","filter","collapseSameTiles","unshift","transcendedField","direction","collapsedRow","react_default","a","createElement","className","map","j","Component","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.fedcc471.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...props) {\n    super(...props);\n\n    this.state = {\n      field: [\n        [0, 4, 0, 0],\n        [0, 0, 0, 0],\n        [16, 0, 0, 0],\n        [0, 0, 0, 0],\n      ],\n      isGameActive: false,\n      isWin: false,\n    };\n\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n  }\n\n  componentWillMount() {\n    document.addEventListener('keyup', this.handleKeyUp);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyUp);\n  }\n\n  componentDidMount() {\n    let {isGameActive} = this.state;\n\n    if (!isGameActive) {\n      this.spawnNumbers(2);\n      this.setState({isGameActive: true})\n    }\n  }\n\n  spawnNumbers(count) {\n    let {field} = this.state;\n    let freeCells = [];\n    let finalCells = [];\n\n    for (let row = 0; row<4; row++) {\n      for (let col = 0; col<4; col++) {\n        if (field[row][col] === 0) {\n          freeCells.push([row, col])\n        }\n      }\n    }\n\n    for (let i = 0; i < count; i++) {\n      let cellToSpawn = Math.floor(Math.random() * freeCells.length);\n\n      finalCells.push(freeCells.splice(cellToSpawn, 1)[0]);\n    }\n\n    this.setState(prevState => {\n      let newField = [...prevState.field];\n\n      for (let cell of finalCells) {\n        let [row, col] = cell;\n        newField[row][col] = this.getNewTileValue();\n      }\n\n      return {\n        field: newField\n      }\n    })\n\n  }\n\n  getNewTileValue() {\n    let number = Math.floor(Math.random() * 10) + 1;\n\n    if (number === 1) {\n      return 4;\n    } else {\n      return 2;\n    }\n  }\n\n  handleKeyUp(event) {\n    let availableKeys = ['ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'];\n    let {key} = event;\n\n    if (!availableKeys.includes(key)) {\n      return;\n    }\n\n    this.handleMove(key);\n  }\n\n  handleMove(moveKey) {\n    console.log(moveKey);\n    let {field} = this.state;\n    let fieldAfterMove = [];\n\n    if (moveKey === 'ArrowRight' || moveKey === 'ArrowLeft') {\n      for (let row = 0; row<4; row++) {\n        let shiftedRow = field[row].filter(col => col > 0);\n\n        shiftedRow = this.collapseSameTiles(shiftedRow, moveKey);\n\n        while (shiftedRow.length < 4) {\n          if (moveKey === 'ArrowRight') {\n            shiftedRow.unshift(0);\n          } else if (moveKey === 'ArrowLeft') {\n            shiftedRow.push(0);\n          }\n        }\n\n        fieldAfterMove.push(shiftedRow);\n      }\n    } else if (moveKey === 'ArrowUp' || moveKey === 'ArrowDown') {\n      let transcendedField = [[],[],[],[]];\n\n      for (let row = 0; row<4; row++) {\n        for (let col = 0; col<4; col++) {\n          if (field[row][col] !== 0) {\n            transcendedField[col].push(field[row][col]);\n          }\n        }\n      }\n\n      for (let row = 0; row<4; row++) {\n        let shiftedRow = transcendedField[row].filter(col => col > 0);\n\n        shiftedRow = this.collapseSameTiles(shiftedRow, moveKey);\n\n        while (shiftedRow.length < 4) {\n          if (moveKey === 'ArrowDown') {\n            shiftedRow.unshift(0);\n          } else if (moveKey === 'ArrowUp') {\n            shiftedRow.push(0);\n          }\n        }\n\n        transcendedField[row] = shiftedRow;\n      }\n\n      fieldAfterMove = [[],[],[],[]];\n\n      for (let row = 0; row<4; row++) {\n        for (let col = 0; col<4; col++) {\n          fieldAfterMove[row].push(\n            transcendedField[col][row]\n          );\n        }\n      }\n    }\n\n    this.setState({field: fieldAfterMove}, () => this.spawnNumbers(1));\n\n  }\n\n  collapseSameTiles(row, direction) {\n    let collapsedRow = [...row];\n\n    if (direction === 'ArrowRight' || direction === 'ArrowDown') {\n      for (let i = collapsedRow.length - 1; i > 0; i--) {\n        if (collapsedRow[i] === collapsedRow[i-1]) {\n          collapsedRow[i] += collapsedRow[i];\n          collapsedRow[i-1] = 0;\n        }\n      }\n    } else if (direction === 'ArrowLeft' || direction === 'ArrowUp') {\n      for (let i = 0; i < collapsedRow.length - 1; i++) {\n        if (collapsedRow[i] === collapsedRow[i+1]) {\n          collapsedRow[i] += collapsedRow[i];\n          collapsedRow[i+1] = 0;\n        }\n      }\n    }\n\n    collapsedRow = collapsedRow.filter(col => col > 0);\n\n    return collapsedRow;\n  }\n\n  render() {\n    let {field} = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-field\">\n\n          {\n            field.map((row, i) => {\n              return (<div key={`row ${i}`} className=\"App-field-row\">\n\n                {\n                  row.map((cell, j) => {\n                    return (\n                      <div key={`cell ${i}_${j}`} className=\"App-field-cell\">\n\n                        {\n                          (cell > 0) &&\n                          <div className=\"App-field-cell-tile\">\n                            {cell}\n                          </div>\n                        }\n\n                      </div>\n                    )\n                  })\n                }\n\n              </div>)\n            })\n          }\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}